
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;
	
	//ВКМ_Старт - начало изменений
	//Петров Д.В. Дата:
	//	Добавляем движение по регистру ВКМ_ВыполненныеКлиентуРаботыРег
	
	Константа = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура КАК Номенклатура,
		|	РеализацияТоваровУслугУслуги.Количество КАК КоличествоЧасов,
		|	РеализацияТоваровУслугУслуги.Сумма КАК СуммаКОплате
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
		|	И РеализацияТоваровУслугУслуги.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Номенклатура", Константа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботыРег.ДобавитьРасход();
		Движение.Период = Дата;
		Движение.Регистратор = Ссылка;
		Движение.Клиент = Контрагент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ВыборкаДетальныеЗаписи.КоличествоЧасов;
		Движение.СуммаКОплате = ВыборкаДетальныеЗаписи.СуммаКОплате;
		Движения.ВКМ_ВыполненныеКлиентуРаботыРег.Записать();
		
	КонецЦикла;
//	//ВКМ_Стоп - конец изменений

КонецПроцедуры

//ВКМ_Старт - начало изменений
//Петров Д.В. Дата:
// Если выбран договор с типом "Абонентское обслуживание", то отключаем проверку заполнения основания

Процедура ОбработкаПроверкиЗаполнения (Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив();
	
	Если Договор.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание") Тогда

	НепроверяемыеРеквизиты.Добавить("Основание");
	
	КонецЕсли;

	УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);

КонецПроцедуры

Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов) Экспорт
	
	Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
 
    // перед удалением реквизита из массива необходимо проверить, что он там есть
    // (не был удален ранее платформой или в коде).
    ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
    Если ПорядковыйНомер <> Неопределено Тогда
      МассивРеквизитов.Удалить(ПорядковыйНомер);
    КонецЕсли;
 
	КонецЦикла;
	
КонецПроцедуры

//ВКМ_Стоп - конец изменений


//ВКМ_Старт - начало изменений
//Петров Д.В. Дата: 19.07.2025
// Если выбран договор с типом "Абонентское обслуживание", выполняем автозаполнение ТЧ Услуги
Процедура ВыполнитьАвтозаполнение() Экспорт
	
	АбонентскаяПлата = Константы.ВКМ_НоменклатураАбонентскаяПлата.Получить();
	РаботаСпециалиста = Константы.ВКМ_НоменклатураРаботыСпециалиста.Получить();
	
	Если РаботаСпециалиста = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнена константа: ""НоменклатураРаботыСпециалиста""";
		Сообщение.Сообщить();
		Возврат;
	
	КонецЕсли;
	
	Если АбонентскаяПлата = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнена константа: ""НоменклатураАбонентскаяПлата""";
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	// Получаем данные по регистру накоплений и договору
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_ВыполненныеКлиентуРаботыРегОбороты.Договор.ВКМ_АбонентскаяПлата КАК СтоимостьАбонентскаяПлата,
		|	ВКМ_ВыполненныеКлиентуРаботыРегОбороты.Договор.ВКМ_СтоимостьЧасаРаботы КАК СтоимостьЧасаРаботы,
		|	ВКМ_ВыполненныеКлиентуРаботыРегОбороты.КоличествоЧасовПриход КАК КоличествоЧасов,
		|	ВКМ_ВыполненныеКлиентуРаботыРегОбороты.СуммаКОплатеПриход КАК СуммаКОплате
		|ИЗ
		|	РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботыРег.Обороты(&НачалоПериода, &КонецПериода,,) КАК
		|		ВКМ_ВыполненныеКлиентуРаботыРегОбороты
		|ГДЕ
		|	ВКМ_ВыполненныеКлиентуРаботыРегОбороты.Договор = &Договор";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("Договор", Договор.Ссылка);
	Запрос.УстановитьПараметр("Конецпериода", КонецМесяца(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Услуги.Очистить();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	
	Если ВыборкаДетальныеЗаписи.СтоимостьАбонентскаяПлата <> 0 Тогда
		
		НоваяСтрокаТЧУслуги = Услуги.Добавить();
		НоваяСтрокаТЧУслуги.Номенклатура = АбонентскаяПлата;
		НоваяСтрокаТЧУслуги.Количество = 1;
		НоваяСтрокаТЧУслуги.Сумма = ВыборкаДетальныеЗаписи.СтоимостьАбонентскаяПлата;
		
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.СуммаКОплате > 0 Тогда
		
		НоваяСтрокаТЧУслуги = Услуги.Добавить();
		НоваяСтрокаТЧУслуги.Номенклатура = РаботаСпециалиста;
		НоваяСтрокаТЧУслуги.Количество = ВыборкаДетальныеЗаписи.КоличествоЧасов;
		НоваяСтрокаТЧУслуги.Цена = ВыборкаДетальныеЗаписи.СтоимостьЧасаРаботы;
		НоваяСтрокаТЧУслуги.Сумма = ВыборкаДетальныеЗаписи.СуммаКОплате;
		
		
		
	КонецЕсли;
	
	КонецЦикла;
	
	Записать();
		
КонецПроцедуры

//ВКМ_Стоп - конец изменений

#КонецОбласти

#КонецЕсли
